<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis实现多数据源操作</title>
      <link href="/2020/10/10/mybatis-shi-xian-duo-shu-ju-yuan-cao-zuo/"/>
      <url>/2020/10/10/mybatis-shi-xian-duo-shu-ju-yuan-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="场景描述："><a href="#场景描述：" class="headerlink" title="场景描述："></a>场景描述：</h2><p>最近，我总是在想会不会出现这样一种情况，在一个不是多模块的项目中，我想连接两个数据库进行操作，该如何办呢。当然，依靠maven构建多模块的微服务项目，可以在每一个模块中操作不同的数据库，但对于一个成熟的小型项目而言，这似乎不是很好的解决方法。</p><p>其实，虽然没吃过猪肉，但还没见过猪跑么。想想那些大型的电商级别的项目，动辄百万的数据方法，肯定是分库、读写分离等等。这其中一定不乏优秀的框架，但今天我就不妨从<code>SpringBoot</code>的对<code>Mybatis</code>的依赖注入和角度，研究一下<code>SpringBoot</code>是如何为<code>Mybatis</code>分配数据源的。</p><h2 id="关于多数据源的理解"><a href="#关于多数据源的理解" class="headerlink" title="关于多数据源的理解"></a>关于多数据源的理解</h2><p><img src="https://gitee.com/porridgez/myPictureBase/raw/master/mybatis1.png" srcset="/img/loading.gif" lazyload alt="流程图"></p><p>所以任务就变的很明朗了，就是分别注入实现多个<code>DataSource</code>和多个<code>SqlSession</code>再将多个<code>mapper</code>和<code>SqlSession</code>对应起来就完成了Mybatis的初始化。</p><h2 id="Talk-Less-Show-Me-The-Code"><a href="#Talk-Less-Show-Me-The-Code" class="headerlink" title="Talk Less Show Me The Code"></a>Talk Less Show Me The Code</h2><p>1、配置<code>application.yml</code>文件</p><p>这里定义了两个数据源分别是<code>primary datasource</code>和<code>second datasource</code></p><pre class=" language-yml"><code class="language-yml">datasource:  primary:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useSSL=false    username: root    password: 123456  second:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/second_test?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useSSL=false    username: root    password: 123456</code></pre><h2 id="实现DataSource的初始化-有两种方法"><a href="#实现DataSource的初始化-有两种方法" class="headerlink" title="实现DataSource的初始化:有两种方法"></a>实现<code>DataSource</code>的初始化:有两种方法</h2><p>方法1:使用<code>DataSourceBuilder</code></p><p>​    配置主数据源：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"PrimaryDataSourceProperties"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"datasource.primary"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">primaryDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​    配置从数据源：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"SecondDataSourceProperties"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"datasource.second"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">SecondDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里值得一提的是<code>DataSource</code>只是获取的连接的接口，是java操作所有类型数据库的规范，所以不能用<code>return new DataSource()</code>的方式直接注入。</p><p>打开<code>DataSourceBuilder</code>的源码可以看到其中保留了常用的<code>DataSource</code>实现类<code>&quot;com.zaxxer.hikari.HikariDataSource&quot;, &quot;org.apache.tomcat.jdbc.pool.DataSource&quot;, &quot;org.apache.commons.dbcp2.BasicDataSource&quot;</code>。</p><p>默认的是实现的<code>HikariDataSource</code>数据源</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceBuilder</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">DataSource</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> DATA_SOURCE_TYPE_NAMES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"com.zaxxer.hikari.HikariDataSource"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.tomcat.jdbc.pool.DataSource"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.commons.dbcp2.BasicDataSource"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//......</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DataSourceBuilder<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DataSourceBuilder<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataSource</span><span class="token operator">></span> type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataSource result <span class="token operator">=</span> <span class="token punctuation">(</span>DataSource<span class="token punctuation">)</span>BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">maybeGetDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">maybeGetDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"driverClassName"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String url <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String driverClass <span class="token operator">=</span> DatabaseDriver<span class="token punctuation">.</span><span class="token function">fromJdbcUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"driverClassName"</span><span class="token punctuation">,</span> driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p><code>DataSourceBuilder</code>可以通过查找路径中的驱动和url从而判断需要实现数据源是哪种。</p><p>方法2:利用<code>DataSourceProperties</code>实现<code>DataSource</code></p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//主数据源</span>        <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"PrimaryDataSourceProperties"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"datasource.primary"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSourceProperties <span class="token function">primaryDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"PrimaryDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> DataSource <span class="token function">PrimaryDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">primaryDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//从数据源</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"SecondDataSourceProperties"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"datasource.second"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSourceProperties <span class="token function">SecondDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"SecondDataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">SecondDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">SecondDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>上面的思路中我就觉得是通过<code>DataSource</code>来构造<code>SqlSession</code>给<code>Mysql</code>使用，所以我不需要关心构造的<code>DataSource</code>是哪种数据源呀。而且，这种构造方法的拓展性也极大地提高了。</p><h2 id="构造SqlSessionFactory"><a href="#构造SqlSessionFactory" class="headerlink" title="构造SqlSessionFactory"></a>构造<code>SqlSessionFactory</code></h2><p>​    主数据源的<code>SqlSessionFactory</code></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"PrimarySqlSessionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">PrimarySqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SqlSessionFactoryBean sqlSessionFactoryBean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">PrimaryDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"/mapper/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​    从数据源的<code>SqlSessionFactory</code></p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"SecondSqlSessionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">SecondSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SqlSessionFactoryBean sqlSessionFactoryBean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SecondDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"/mapper/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="配置MapperScan"><a href="#配置MapperScan" class="headerlink" title="配置MapperScan"></a>配置MapperScan</h2><p>只需要为指定每个mapper对应的<code>sqlSessionFactoryRef</code>就能指定不同的数据源，本例中指定dao层对应的是<code>second datasource</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"top.porridgez.dao"</span> <span class="token punctuation">,</span>sqlSessionFactoryRef <span class="token operator">=</span> <span class="token string">"SecondSqlSessionFactory"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer算法篇（一）</title>
      <link href="/2020/07/20/jian-zhi-offer-suan-fa-pian-yi/"/>
      <url>/2020/07/20/jian-zhi-offer-suan-fa-pian-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="1、在一个二维数组中，每一行都是按照从左到右递增的顺序排序，每一列都是按照从上到下的递增的顺序排列。完成一个数据的判断函数，要求输入一个这样的的数组，判断数组中是否有这样的整数。"><a href="#1、在一个二维数组中，每一行都是按照从左到右递增的顺序排序，每一列都是按照从上到下的递增的顺序排列。完成一个数据的判断函数，要求输入一个这样的的数组，判断数组中是否有这样的整数。" class="headerlink" title="1、在一个二维数组中，每一行都是按照从左到右递增的顺序排序，每一列都是按照从上到下的递增的顺序排列。完成一个数据的判断函数，要求输入一个这样的的数组，判断数组中是否有这样的整数。"></a>1、在一个二维数组中，每一行都是按照从左到右递增的顺序排序，每一列都是按照从上到下的递增的顺序排列。完成一个数据的判断函数，要求输入一个这样的的数组，判断数组中是否有这样的整数。</h3><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><ol><li>首先选取数组中有上角的元素，如果该数字就是要找的数据，那么就直接返回了true；</li><li>如果此时右上角的这个数大于被查找的数就忽略现在停留的这一列，index下标指向新的元素；</li><li>如果此时右上角的这个数小于被查找的的数，就略现在停留的这一行，index下标指向新的元素；</li><li>转像第一步；</li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 输入条件判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix <span class="token operator">==</span> null <span class="token operator">||</span> matrix<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len gth <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组的行数</span>            <span class="token keyword">int</span> cols <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组行的列数</span>            <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 起始开始的行号</span>            <span class="token keyword">int</span> col <span class="token operator">=</span> cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 起始开始的列号</span>            <span class="token comment" spellcheck="true">// 要查找的位置确保在数组之内</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>row <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> row <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> col <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">&lt;</span> cols<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果找到了就直接退</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">></span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果找到的数比要找的数大，说明要找的数在当前数的左边</span>                    col<span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 列数减一，代表向左移动</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果找到的数比要找的数小，说明要找的数在当前数的 </span>                row<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 行数加一，代表向下移动</span>                    <span class="token punctuation">}</span> <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、查找字符串数组的最大公共前缀"><a href="#2、查找字符串数组的最大公共前缀" class="headerlink" title="2、查找字符串数组的最大公共前缀"></a>2、查找字符串数组的最大公共前缀</h3><p>要求：编写⼀个函数来查找字符串数组中的最⻓公共前缀。如果不存在公共前缀，返回空字符<br>串 “”。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查找最大前缀只需要</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"aoaad"</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"aaaaa"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">find</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings<span class="token punctuation">)</span><span class="token punctuation">{</span>        StringBuilder stringBuilder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token operator">=</span>strings<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>strings<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>strings<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络编程</title>
      <link href="/2020/07/17/java-wang-luo-bian-cheng/"/>
      <url>/2020/07/17/java-wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈我对于函数式编程了理解</title>
      <link href="/2020/07/14/tan-tan-wo-dui-yu-han-shu-shi-bian-cheng-liao-li-jie/"/>
      <url>/2020/07/14/tan-tan-wo-dui-yu-han-shu-shi-bian-cheng-liao-li-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tk-mybatis使用总结</title>
      <link href="/2020/07/02/tk-mybatis-shi-yong-zong-jie/"/>
      <url>/2020/07/02/tk-mybatis-shi-yong-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是tk-mybatis"><a href="#什么是tk-mybatis" class="headerlink" title="什么是tk.mybatis"></a>什么是tk.mybatis</h2><h3 id="tk-mybatis顾名思义就是mybatis的进一步封装。tk-mybatis可以使得ORM框架更加简便，不再需要手写SQL语句。从而进一步提高CRUD的速率。"><a href="#tk-mybatis顾名思义就是mybatis的进一步封装。tk-mybatis可以使得ORM框架更加简便，不再需要手写SQL语句。从而进一步提高CRUD的速率。" class="headerlink" title="tk.mybatis顾名思义就是mybatis的进一步封装。tk.mybatis可以使得ORM框架更加简便，不再需要手写SQL语句。从而进一步提高CRUD的速率。"></a>tk.mybatis顾名思义就是mybatis的进一步封装。tk.mybatis可以使得ORM框架更加简便，不再需要手写SQL语句。从而进一步提高CRUD的速率。</h3><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><h3 id="1、使用Mave构建项目，POM文件中导入依赖坐标"><a href="#1、使用Mave构建项目，POM文件中导入依赖坐标" class="headerlink" title="1、使用Mave构建项目，POM文件中导入依赖坐标"></a>1、使用Mave构建项目，POM文件中导入依赖坐标</h3><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--通用mapper起步依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="2、编写POJO类"><a href="#2、编写POJO类" class="headerlink" title="2、编写POJO类"></a>2、编写POJO类</h3><ul><li><p>由于ORM框架会将数据表和类之间建立起对应的映射关系，所以编写一个合格的POJO类对项目意义很大。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"Brand"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"Brand"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"tb_brand"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Brand</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"品牌id"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//品牌id</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"品牌名称"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//品牌名称</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"品牌图片地址"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"image"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String image<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//品牌图片地址</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"品牌的首字母"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"letter"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String letter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//品牌的首字母</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"排序"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"seq"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer seq<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排序</span>    <span class="token comment" spellcheck="true">//get方法</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//set方法</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="3、编写Dao"><a href="#3、编写Dao" class="headerlink" title="3、编写Dao"></a>3、编写Dao</h3><ul><li>Dao的编写相当简单，不需要额外的sql语句的注解，也不需要xml配置文件，只需要将Mapper继承Mapper类，并且指定POJO的泛型即可</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***** * @Description: com.changgou.goods.dao * Dao层: *  使用通用Mapper->MyBatis动态SQL *  0SQL语句,面向对象操作 *  要求：Dao必须集成Mapper&lt;T>接口 *        Mapper接口中有增删改查各种操作 ****/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BrandMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Brand<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>注意，是继承Mapper类而不是接口，Mapper的权限定类名是<code>import tk.mybatis.mapper.common.Mapper;</code></li></ul><h3 id="4、service层实现"><a href="#4、service层实现" class="headerlink" title="4、service层实现"></a>4、service层实现</h3><ul><li><p>编写service类，注入Mapper依赖</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BrandService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BrandMapper brandMapper<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>基本的CRUD操作（由于继承了Mapper类，所以自动获得了父类中的方法）。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/***     * 查询所有     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Brand<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用通用Mapper查询所有</span>        <span class="token keyword">return</span> brandMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 根据Id查询     * @param id     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Brand <span class="token function">findById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通用Mapper：selectByPrimaryKey:根据ID查询</span>        <span class="token keyword">return</span> brandMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/****     * 添加品牌     * @param brand     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/***         * insertSelective：增加操作,忽略空值         * 只要方法中带有Selective都会忽略空值         * INSERT INTO tb_brand(name,letter) VALUES(?,?)         *         * brandMapper.insert(brand);         * INSERT INTO tb_brand(id,name,image,letter,seq) VALUES(?,?,?,?,?)         */</span>        <span class="token comment" spellcheck="true">//方法中带有selective会忽略空值</span>        brandMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 删除     * @param id     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        brandMapper<span class="token punctuation">.</span><span class="token function">deleteByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 修改品牌     * @param brand     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通用Mapper修改数据，忽略空值</span>        brandMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><h2 id="利用tk-mybatis进行条件化查询"><a href="#利用tk-mybatis进行条件化查询" class="headerlink" title="利用tk.mybatis进行条件化查询"></a>利用tk.mybatis进行条件化查询</h2><h3 id="1、条件化查询的的关键是tk-mybatis中的Exampl的构建"><a href="#1、条件化查询的的关键是tk-mybatis中的Exampl的构建" class="headerlink" title="1、条件化查询的的关键是tk.mybatis中的Exampl的构建"></a>1、条件化查询的的关键是<code>tk.mybatis</code>中的<code>Exampl</code>的构建</h3><h3 id="2、构建完Example类后就可以通过Mapper中自带的selectByExample方法进行搜索"><a href="#2、构建完Example类后就可以通过Mapper中自带的selectByExample方法进行搜索" class="headerlink" title="2、构建完Example类后就可以通过Mapper中自带的selectByExample方法进行搜索"></a>2、构建完<code>Example</code>类后就可以通过<code>Mapper</code>中自带的<code>selectByExample</code>方法进行搜索</h3><ul><li><p>示例代码 创建一个<code>Example</code></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Example <span class="token function">createExample</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//动态构建条件Example,criteria:动态组装条件</span>        Example example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span>Brand<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Example<span class="token punctuation">.</span>Criteria criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//组装条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>brand<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//id</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>brand<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>brand<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>brand<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//1)输入name-根据name查询[模糊查询]   select * from tb_brand wehere name like '%brand.getName%'</span>                criteria<span class="token punctuation">.</span><span class="token function">andLike</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>brand<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>brand<span class="token punctuation">.</span><span class="token function">getLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//2)输入了letter-根据letter查询       select * from tb_brand where letter= 'brand.getLetter'</span>                criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"letter"</span><span class="token punctuation">,</span>brand<span class="token punctuation">.</span><span class="token function">getLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> example<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>通过<code>Example</code>查询数据</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Brand<span class="token operator">></span> <span class="token function">findList</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//条件组装抽取</span>        Example example <span class="token operator">=</span> <span class="token function">createExample</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> brandMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> “mybatis” </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PageHelp分页插件使用初体验</title>
      <link href="/2020/07/01/pagehelp-fen-ye-cha-jian-shi-yong-chu-ti-yan/"/>
      <url>/2020/07/01/pagehelp-fen-ye-cha-jian-shi-yong-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>SpringBoot2.X</p></li><li><p>关键依赖（Maven）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><p>Dao层（使用tk-mybatis）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***** * @Author: www.porridgez.top * @Description: top.porridgez.goods.dao * Dao层: *  使用通用Mapper->MyBatis动态SQL *  0SQL语句,面向对象操作 *  要求：Dao必须集成Mapper&lt;T>接口 *        Mapper接口中有增删改查各种操作 ****/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BrandMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Brand<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>service层</p><p>接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/****     * 分页+条件搜索     * @param pageNum     * @param size     * @param brand     */</span>    PageInfo<span class="token operator">&lt;</span>Brand<span class="token operator">></span> <span class="token function">findPage</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">,</span> Integer pageNum<span class="token punctuation">,</span> Integer size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/***     * 分页查询     * @param pageNum : 当前页     * @param size : 每页显示条数     * @return PageInfo&lt;T>     */</span>    PageInfo<span class="token operator">&lt;</span>Brand<span class="token operator">></span> <span class="token function">findPage</span><span class="token punctuation">(</span>Integer pageNum<span class="token punctuation">,</span>Integer size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***     * 分页+条件搜索     * @param brand     * @param pageNum     * @param size     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PageInfo<span class="token operator">&lt;</span>Brand<span class="token operator">></span> <span class="token function">findPage</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">,</span> Integer pageNum<span class="token punctuation">,</span> Integer size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//静态分页 PageHelper.startPage(pageNum,size)</span>        PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//条件搜索</span>        <span class="token comment" spellcheck="true">//example是自己配置的条件对象</span>        Example example <span class="token operator">=</span> <span class="token function">createExample</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//搜索</span>        List<span class="token operator">&lt;</span>Brand<span class="token operator">></span> brands <span class="token operator">=</span> brandMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装PageInfo&lt;T></span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token operator">&lt;</span>Brand<span class="token operator">></span><span class="token punctuation">(</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> PageHelp分页插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内部类</title>
      <link href="/2020/05/12/java-nei-bu-lei/"/>
      <url>/2020/05/12/java-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一个定义在另一个类中的类，叫作内部类。</p><p>内部类是一种非常有用的特性，因为它允许你把一些逻辑相关的类组织在一起，并控制位于内部的类的可见性。然而必须要了解，内部类与组合是完全不同的概念，这一点很重要。在最初，内部类看起来就像是一种代码隐藏机制：将类置于其他类的内部。但是，你将会了解到，内部类远不止如此，它了解外围类，并能与之通信，而且你用内部类写出的代码更加优雅而清晰，尽管并不总是这样（而且 Java 8 的 Lambda 表达式和方法引用减少了编写内部类的需求）。</p><h2 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h2><p>代码实例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel1</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Contents</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Destination</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String label<span class="token punctuation">;</span>        <span class="token function">Destination</span><span class="token punctuation">(</span>String whereTo<span class="token punctuation">)</span> <span class="token punctuation">{</span>            label <span class="token operator">=</span> whereTo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String <span class="token function">readLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> label<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Using inner classes looks just like</span>    <span class="token comment" spellcheck="true">// using any other class, within Parcel1:</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ship</span><span class="token punctuation">(</span>String dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Contents c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Destination d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Destination</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">readLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Parcel1 p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcel1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">ship</span><span class="token punctuation">(</span><span class="token string">"Tasmania"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果是Tasmania</span></code></pre><ul><li>当我们在 <code>ship()</code> 方法里面使用内部类的时候，与使用普通类没什么不同。在这里，明显的区别只是内部类的名字是嵌套在 <strong>Parcel1</strong> 里面的。</li><li>如果想从外部类的非静态方法之外的任意位置创建某个内部类的对象，那么必须像在 <code>main()</code> 方法中那样，具体地指明这个对象的类型：<em>OuterClassName.InnerClassName</em>。(译者注：在外部类的静态方法中也可以直接指明类型 <em>InnerClassName</em>，在其他类中需要指明 <em>OuterClassName.InnerClassName</em>。)</li></ul><p>所以内部类自动拥有对其外围类所有成员的访问权。这是如何做到的呢？当某个外围类的对象创建了一个内部类对象时，此内部类对象必定会秘密地捕获一个指向那个外围类对象的引用。然后，在你访问此外围类的成员时，就是用那个引用来选择外围类的成员。幸运的是，编译器会帮你处理所有的细节，但你现在可以看到：内部类的对象只能在与其外围类的对象相关联的情况下才能被创建（就像你应该看到的，内部类是非 <strong>static</strong> 类时）。构建内部类对象时，需要一个指向其外围类对象的引用，如果编译器访问不到这个引用就会报错。不过绝大多数时候这都无需程序员操心。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>当某个外围类的对象创建内部类对象的时候，此内部类必定会捕获一个指向外部对象的引用。然后用这个捕获的引用来访问外围类的成员。捕获外围类的引用是由编译器开操作的。<u>内部类的对象只能在其与外围对象相关联的情况下才能被创建。构建内部对象时候，需要一个指向外围类对象的引用，如果编译器访问不到这个外围对象的引用就会报错。</u></p><p>可以使用.new关键字创建内部类对象。</p><pre class=" language-java"><code class="language-java">OutClass outClass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">OutClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InnerClass innerClass<span class="token operator">=</span>outClass<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实现图片上传功能</title>
      <link href="/2020/04/27/springboot-shi-xian-tu-pian-shang-chuan-gong-neng/"/>
      <url>/2020/04/27/springboot-shi-xian-tu-pian-shang-chuan-gong-neng/</url>
      
        <content type="html"><![CDATA[<h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><ul><li>SpringBoot2.X</li><li>mysql+mybatis</li></ul><h3 id="功能实现代码"><a href="#功能实现代码" class="headerlink" title="功能实现代码"></a>功能实现代码</h3><ul><li><p>图片上传的service代码</p><ul><li><p>通过接受前端传输的<code>MultipartFile</code>类型的图片,通过调用<code>transferTo()</code>方法将文件写入主机的文件目录中。</p></li><li><p><code>UUID</code>用来生成一个商品的ID用于存入数据库，并将商品描述图片的文件路径存入数据库。</p></li><li><p><code>MultipartFile</code>类中的<code>getOriginalFilename</code>方法用来获取文件名。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    GoodsImageMapper goodsImageMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    GoodInfoMapper goodInfoMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upLoadImageService</span><span class="token punctuation">(</span>MultipartFile image<span class="token punctuation">,</span>String goodsName<span class="token punctuation">,</span> Double goodsPrice<span class="token punctuation">,</span> String goodsDescribe<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span><span class="token punctuation">{</span>        Integer goodsId<span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String fileName<span class="token operator">=</span>image<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String suffixName<span class="token operator">=</span>fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileName<span class="token operator">=</span> goodsId<span class="token operator">+</span>suffixName<span class="token punctuation">;</span>        File dest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/jim.chou/Desktop/Java/"</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dest<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dest<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            image<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            goodInfoMapper<span class="token punctuation">.</span><span class="token function">publishGoods</span><span class="token punctuation">(</span>goodsId<span class="token punctuation">,</span>goodsName<span class="token punctuation">,</span>goodsDescribe<span class="token punctuation">,</span>goodsPrice<span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            goodsImageMapper<span class="token punctuation">.</span><span class="token function">UploadImage</span><span class="token punctuation">(</span>goodsId<span class="token punctuation">,</span><span class="token string">"/image/"</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>建立文件的映射关系</p><ul><li><p>为了主机文件文件目录和SpringBoot项目下的文件目录建立对应关系，需要在<code>WebMvcConfigurer</code>的实现类中做如下配置：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMVCConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>              registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/image/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"file:/Users/jim.chou/Desktop/Java/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>这样就能将项目项目结构下的<code>/image/**</code>目录与机的<code>/Users/jim.chou/Desktop/Java/</code>目录建立对应关系</p></li></ul></li><li><p>前端代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>上传图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>图片:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${filename }<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><ul><li>前端通过post方式传递图片参数image。</li></ul></li><li><p>最后在application.yml文件中配置上传大小的限制</p><pre class=" language-yml"><code class="language-yml">  servlet:    multipart:      max-file-size: 100MB      max-request-size: 100MB</code></pre></li><li><p>Controller层代码</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">GoodUpload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span>MultipartFile image<span class="token punctuation">,</span>                           <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"goodsName"</span><span class="token punctuation">)</span> String goodsName<span class="token punctuation">,</span>                           <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"goodsPrice"</span><span class="token punctuation">)</span> Double goodsPrice<span class="token punctuation">,</span>                           <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"goodsDes"</span><span class="token punctuation">)</span>String goodsDescribe<span class="token punctuation">,</span>                           HttpSession session    <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      uploadService<span class="token punctuation">.</span><span class="token function">upLoadImageService</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>goodsName<span class="token punctuation">,</span>goodsPrice<span class="token punctuation">,</span>goodsDescribe<span class="token punctuation">,</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 图片上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发时Fragmen页面不能使用findViewById()获取控件</title>
      <link href="/2020/04/11/android-kai-fa-shi-fragmen-ye-mian-bu-neng-shi-yong-findviewbyid-huo-qu-kong-jian/"/>
      <url>/2020/04/11/android-kai-fa-shi-fragmen-ye-mian-bu-neng-shi-yong-findviewbyid-huo-qu-kong-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>最近有在学习Android引用开发</li><li>平台是：Android stdio</li><li>SDK：Android 10、API 29</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>废话开始了！！！！</li><li>为了实现底部导航菜单栏的功能，增加了Fragment。在定义好的Fragment页面中有<code>button</code>控件定义在xml文档中，在定义页面类文件为其实现功能时，发现不能使用findViewById()方法来获取控件。</li></ul><p><img src="https://img-blog.csdnimg.cn/2019101118491889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvbXB1dGVyX09wZXJhdGVy,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" lazyload alt=""></p><ul><li>原来Fragment页面默认继承的是Fragment类，并没有实例化页面为Activity。而findViewById()方法是Activity实例独有的获取控件的方法。</li></ul><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>通过<code>getActivity()</code>方法。以下是<code>getActivity()</code>的函数定义：可知<code>getActivity()</code>方法返回的是一个<code>FragmentActivity</code>对象。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Return the {@link FragmentActivity} this fragment is currently associated with.     * May return {@code null} if the fragment is associated with a {@link Context}     * instead.     *     * @see #requireActivity()     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">final</span> <span class="token keyword">public</span> FragmentActivity <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mHost <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token punctuation">(</span>FragmentActivity<span class="token punctuation">)</span> mHost<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li><p>于是我试过使用<code>getActivity()</code>方法来<br><img src="https://img-blog.csdnimg.cn/20191011190404393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvbXB1dGVyX09wZXJhdGVy,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" lazyload alt=""></p></li><li><p>结果报错来了：</p></li></ul><pre><code>E/AndroidRuntime: FATAL EXCEPTION: main    Process: com.example.myschool10, PID: 14418    java.lang.NullPointerException: Attempt to invoke virtual method &#39;void android.widget.Button.setOnClickListener(android.view.View$OnClickListener)&#39; on a null object reference</code></pre><p><img src="https://img-blog.csdnimg.cn/20191011190610865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvbXB1dGVyX09wZXJhdGVy,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" lazyload alt=""></p><ul><li><p>原来是在<code>onCreateView()</code>方法中不能使用setOnClickListener()的事件监听必须换在<code>onActivityCreated()</code>方法中使用</p></li><li><p>完整版代码：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PushFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button addphoto<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>push_fragment<span class="token punctuation">,</span>container<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivityCreated</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityCreated</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        Button button <span class="token operator">=</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>click_to_push<span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脱裤？不！是拖库！！！</title>
      <link href="/2020/03/21/tuo-ku-bu-shi-tuo-ku/"/>
      <url>/2020/03/21/tuo-ku-bu-shi-tuo-ku/</url>
      
        <content type="html"><![CDATA[<h4 id="悲惨的教训——“拖库”"><a href="#悲惨的教训——“拖库”" class="headerlink" title="悲惨的教训——“拖库”"></a>悲惨的教训——“拖库”</h4><ul><li>当下在程序员之间最流行的语录是什么？PHP天下第一？人生苦短及时Python？不！！是删库跑路。</li><li>不知道从什么时候开始，黑客入侵企业服务器数据库导致大量用户信息泄露的消息渐渐开始闯入我们的视野。一个个拖库的惨案不断上演，如果你觉得被拖库没什么大不了的话，那你可就是大错特错了。<br><img src="https://gitee.com/porridgez/myPictureBase/raw/master/springsecuity1.jpg" srcset="/img/loading.gif" lazyload alt="springsecurity"></li></ul><h4 id="拖库就是灭亡吗？"><a href="#拖库就是灭亡吗？" class="headerlink" title="拖库就是灭亡吗？"></a>拖库就是灭亡吗？</h4><ul><li>答案是否定的，且不说现如今数据库连接所用到的种种加密技术，为了防备黑客在拖库后获取用户的密码，明文保存密码的时代已经成为了历史。</li><li>如今，如果你有合法权限正大光明地查看一个包含用户账号和你密码的数据库时候，你会发现密码栏中是密密麻麻的十六进制数（32位或者16位）。这就是大名鼎鼎的MD5加密算法。</li><li>关于MD5算法我也就不赘述了，我自己也说不清楚。从黑盒程序员的角度来说，就是一种报文摘要的算法，这种算法可以将任何输入，无论长短都转化成一个确定的32位的字符串。不同的输入（即使是一个字符的变化）会产生不同输出，因此这种算法多是用在完整性验证方面。</li><li>在这种算法的指导下，服务器会将用户的密码用MD5进行加密再存入数据库。在用户下一次登陆的时候，服务器会将用户输入的密码进行MD5计算，得到的结果和数据库中保存的数据进行对比，进而判断是否通过。所以自始至终，知道密码明文的只有用户自己。即使数据库被拖库，黑客依然无法获取明文密码。</li></ul><h4 id="道高一尺，魔高一丈"><a href="#道高一尺，魔高一丈" class="headerlink" title="道高一尺，魔高一丈"></a>道高一尺，魔高一丈</h4><ul><li>现在假设这样一种情况：黑客已经脱裤成功！！！有没有一种情况下他会知道你的密码呢？</li><li>答案是有可能的，为说么说是有可能呢？因为既然MD5加密算法已知，那么黑客完全可以用一些常用的密码在用MD5加密后的和数据库中的密码对比，万一就成了呢？这就是传说中的“碰撞”。</li><li>随着这一理念的不断壮大，人们将一个常用的密码，及其加密后的秘文做了一张表，被称为字典。</li><li>由于MD5只能表示36的16次方数量的值，在算力允许的情况下，就可以找到一个和原密码不一样，却有相同密文值。</li><li>如果你觉得穷举的这种暴力破解的方法很low那你可以了解一下彩虹表<br><img src="https://gitee.com/porridgez/myPictureBase/raw/master/springsecurity2.png" srcset="/img/loading.gif" lazyload alt="springsecurity"><br>这是一种可以可以在无法获得更多内存空间的情况下，获得更多的表空间的方式。有理论得到加持，再加上硬件厂商的GPU计算（英伟达显卡的CUDA技术）每秒可以达到上亿此的计算次数。</li></ul><h4 id="换汤不换药的加盐"><a href="#换汤不换药的加盐" class="headerlink" title="换汤不换药的加盐"></a>换汤不换药的加盐</h4><ul><li>在这样的算力之下，为了提高密码破解的难度，人们想到了加盐——就是将密码加上一个特殊的值在进行哈希运算。</li><li>常见的加盐算法有将账号当成盐的<br><code>username=&quot;admin&quot;;password=&quot;abc123&quot;;persistentPwd=md5(user+password);</code></li><li>为了使盐随机，用UUID的<br><code>salt=UUID.randomUUID();password=&quot;abc123&quot;;persistentPwd=md5(salt+password);</code><br>再将盐保存在数据库中，获得持久化</li><li>还有直接将盐写在密码上的<br><code>salt=UUID.randomUUID();password=&quot;abc123&quot;;persistentPwd=salt+md5(salt+password);</code></li><li>可是，加盐算法也仅仅是阻隔了密码和明文的直接对应，普通的爆破穷举法依然有效。随着计算技术的升级，这些破解起来任然还是时间的问题。</li></ul><h4 id="柳暗花明又一村"><a href="#柳暗花明又一村" class="headerlink" title="柳暗花明又一村"></a>柳暗花明又一村</h4><ul><li>试想一下，为了暴破穷举法可以很快的完成呢？答案就是，普通的散列加密运算几乎没有什么时间成本，这无疑加速了破解的速度。所以有没有一种不同于普通的散列算法的算法，既能做到像散列一样不可逆，又能做到慢加密呢。</li><li>于是乎，BCrypt算法就是这样一个慢加密算法。<br>这是一段由BCrypt算生成的代码。<br><img src="https://gitee.com/porridgez/myPictureBase/raw/master/springsecurity3.png" srcset="/img/loading.gif" lazyload alt="springsecurity"></li><li>通过调整结果参数，可以做到既不影响用户的体验，也能让穷举破解望尘莫及。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot--Condition条件化配置</title>
      <link href="/2020/02/08/springboot-condition-tiao-jian-hua-pei-zhi/"/>
      <url>/2020/02/08/springboot-condition-tiao-jian-hua-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="Conditionl-注解"><a href="#Conditionl-注解" class="headerlink" title="@Conditionl()注解"></a>@Conditionl()注解</h3><ul><li>spring4.0引入的新特性，当你注册bean时，可以对这个bean添加一定的自定义条件，当满足这个条件时，注册这个bean，否则不注册。</li><li>实现Condition接口，重写matches()方法，返回true则意味着注册被注解的bean，false则跳过被注解的bean。<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>  <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>ConditionContext var1<span class="token punctuation">,</span> AnnotatedTypeMetadata var2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>在注册bean时候，可以使用的@Conditionl()判断是否将此类加入到bean容器中</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> readinglist<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ConditionContext<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>AnnotatedTypeMetadata<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplateCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span>                             AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>                 <span class="token string">"org.springframework.jdbc.core.JdbcTemplate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ConditionalOnClass"><a href="#ConditionalOnClass" class="headerlink" title="@ConditionalOnClass()"></a>@ConditionalOnClass()</h3><ul><li>当你用Java来声明Bean的时候，可以使用这个自定义条件类:</li></ul><pre><code>    @Conditional(JdbcTemplateCondition.class)    public MyService myService(Class class) {        ...     }</code></pre><ul><li><code>@ConditionalOnClass()</code>：当类路径下存在某个类时才会执行。<br>以<code>RedisAutoConfiguration</code>类为例：</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>RedisOperations<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>RedisProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>LettuceConnectionConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> JedisConnectionConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>       </code></pre><h3 id="ConditionalOnClass-1"><a href="#ConditionalOnClass-1" class="headerlink" title="@ConditionalOnClass()"></a>@ConditionalOnClass()</h3><p><code>@ConditionalOnClass({RedisOperations.class})</code>其用途是判断当前classpath下是否存在指定类，若是则将当前的配置装载入spring容器。此处用于判断是否引入了redis的starters。若是类路径下有<code>RedisOperations</code>类则将以下的配置载入到IOC容器中。</p><ul><li><code>@ConditionakOnMissBean</code>表示IOC容器中不存在某个Bean时才会执行。还是以redis的starter为例。</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>        name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"redisTemplate"</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建wordpress+Nginx代理域名</title>
      <link href="/2020/02/01/docker-da-jian-wordpress-nginx-dai-li-yu-ming/"/>
      <url>/2020/02/01/docker-da-jian-wordpress-nginx-dai-li-yu-ming/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>docker</li><li>docker-compose</li><li>centos7</li><li>nginx1.9.9</li></ul><h2 id="1、docker安装"><a href="#1、docker安装" class="headerlink" title="1、docker安装"></a>1、docker安装</h2><h4 id="docker可以选择docker-ce或者docker版本、docker只是为了部署wordpress所以直接安装的docker"><a href="#docker可以选择docker-ce或者docker版本、docker只是为了部署wordpress所以直接安装的docker" class="headerlink" title="docker可以选择docker-ce或者docker版本、docker只是为了部署wordpress所以直接安装的docker"></a>docker可以选择docker-ce或者docker版本、docker只是为了部署wordpress所以直接安装的docker</h4><ul><li>安装docker<br><code>yum install docker</code></li><li>启动docker<br><code>systemctl start docker</code></li><li>设置开机自动启动<br><code>systemctl enable docker</code></li></ul><h2 id="2、安装docker-compose"><a href="#2、安装docker-compose" class="headerlink" title="2、安装docker-compose"></a>2、安装docker-compose</h2><h4 id="Docker-Compose是-docker-提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用-compose，我们可以通过-YAML-文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。"><a href="#Docker-Compose是-docker-提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用-compose，我们可以通过-YAML-文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。" class="headerlink" title="Docker Compose是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用 compose，我们可以通过 YAML 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。"></a>Docker Compose是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用 compose，我们可以通过 YAML 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。</h4><ul><li><p>安装docker-compose<br><code>yum install -y docker-compose</code></p></li><li><p>需要使用到的docker-compose.yml文件下载 密码:9wg7<br><a href="http://链接:https://pan.baidu.com/s/1lJB49u9puv7m3wCUg5uexw" title="百度网盘自取">百度网盘自取</a></p></li></ul><h2 id="3、运行wordpress"><a href="#3、运行wordpress" class="headerlink" title="3、运行wordpress"></a>3、运行wordpress</h2><h4 id="在wordpress运行的服务器主机上自动构建wordpress及mysql的容器"><a href="#在wordpress运行的服务器主机上自动构建wordpress及mysql的容器" class="headerlink" title="在wordpress运行的服务器主机上自动构建wordpress及mysql的容器"></a>在wordpress运行的服务器主机上自动构建wordpress及mysql的容器</h4><h4 id="在更目录下创建博客项目的文件夹（文件夹名字将成为博客的项目名字）"><a href="#在更目录下创建博客项目的文件夹（文件夹名字将成为博客的项目名字）" class="headerlink" title="在更目录下创建博客项目的文件夹（文件夹名字将成为博客的项目名字）"></a>在更目录下创建博客项目的文件夹（文件夹名字将成为博客的项目名字）</h4><ul><li>在根目录下创建文件夹<br><code>mkdir /myblog</code></li><li>将下载的docker-compose.yml文件放入到/myblog文件夹中，并进入文件夹<br><code>cd /myblog</code></li><li>自动构建wordpress<br><code>docker-comose up -d</code></li></ul><h2 id="4、开放端口"><a href="#4、开放端口" class="headerlink" title="4、开放端口"></a>4、开放端口</h2><h4 id="wordpress对外的端口号是8000由于服务器的防火墙限制，可能80（域名默认的端口号）和8000被限制访问"><a href="#wordpress对外的端口号是8000由于服务器的防火墙限制，可能80（域名默认的端口号）和8000被限制访问" class="headerlink" title="wordpress对外的端口号是8000由于服务器的防火墙限制，可能80（域名默认的端口号）和8000被限制访问"></a>wordpress对外的端口号是8000由于服务器的防火墙限制，可能80（域名默认的端口号）和8000被限制访问</h4><ul><li>开启8000、80端口<br><code>firewall-cmd --permanent --add-port=80/tcp</code><br><code>firewall-cmd --permanent --add-port=8000/tcp</code></li><li>重新加载防火墙配置<br><code>firewall-cmd --reload</code></li></ul><h4 id="嫌上面操作麻烦的可以直接关闭防火墙"><a href="#嫌上面操作麻烦的可以直接关闭防火墙" class="headerlink" title="嫌上面操作麻烦的可以直接关闭防火墙"></a>嫌上面操作麻烦的可以直接关闭防火墙</h4><p><code>systemctl stop firewalld</code></p><h4 id="不出意外的话，现在就可以通过www-xxxx-com-8000访问进入安装界面"><a href="#不出意外的话，现在就可以通过www-xxxx-com-8000访问进入安装界面" class="headerlink" title="不出意外的话，现在就可以通过www.xxxx.com:8000访问进入安装界面"></a>不出意外的话，现在就可以通过<code>www.xxxx.com:8000</code>访问进入安装界面</h4><p><code>www.xxxx.com</code>换成自己绑定了主机ip的域名</p><h2 id="5、利用Nginx反向代理自己的博客域名"><a href="#5、利用Nginx反向代理自己的博客域名" class="headerlink" title="5、利用Nginx反向代理自己的博客域名"></a>5、利用Nginx反向代理自己的博客域名</h2><h4 id="Nginx的安装过程就不一一赘述了，利用Nginx可以将域名默认访问的80端口转发到8000端口，从而实现域名直接访问博客"><a href="#Nginx的安装过程就不一一赘述了，利用Nginx可以将域名默认访问的80端口转发到8000端口，从而实现域名直接访问博客" class="headerlink" title="Nginx的安装过程就不一一赘述了，利用Nginx可以将域名默认访问的80端口转发到8000端口，从而实现域名直接访问博客"></a>Nginx的安装过程就不一一赘述了，利用Nginx可以将域名默认访问的80端口转发到8000端口，从而实现域名直接访问博客</h4><ul><li><p>安装完Nginx后 修改<code>/usr/local/nginx/conf/nginx.conf</code>配置文件</p><pre class=" language-json"><code class="language-json">server <span class="token punctuation">{</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  www.xxxx.com<span class="token punctuation">;</span>        location / <span class="token punctuation">{</span>            root   html<span class="token punctuation">;</span>            proxy_pass http<span class="token operator">:</span>//<span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">8000</span><span class="token punctuation">;</span>            index  index.html index.htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>server_name  <a href="http://www.xxxx.com" target="_blank" rel="noopener">www.xxxx.com</a>; 换上自己的域名</p></li><li><p>重新加载nginx配置文件<br><code>/usr/local/nginx/sbin/.nginx -s reload</code></p></li></ul><h4 id="到这一步为止不出意外应该直接通过域名就能访问到wordpress-博客了。"><a href="#到这一步为止不出意外应该直接通过域名就能访问到wordpress-博客了。" class="headerlink" title="到这一步为止不出意外应该直接通过域名就能访问到wordpress 博客了。"></a>到这一步为止不出意外应该直接通过域名就能访问到wordpress 博客了。</h4>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> nginx </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
